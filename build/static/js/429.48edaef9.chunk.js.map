{"version":3,"file":"static/js/429.48edaef9.chunk.js","mappings":"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","sources":["BaseUrl.jsx","Pages/previewPDF.jsx"],"sourcesContent":["\r\n\r\nexport const baseUrl = \"https://backend.defencepost.in\"\r\n// export const baseUrl = \"http://localhost:8000\"","import React, { useRef, useEffect } from 'react'\r\nimport { useState } from 'react';\r\nimport { Document, Page, pdfjs } from 'react-pdf';\r\nimport { Button, Stack, Spinner, NumberInput, NumberInputField, NumberInputStepper, NumberIncrementStepper, NumberDecrementStepper, Divider, Text } from '@chakra-ui/react'\r\nimport { AiOutlineZoomIn, AiOutlineZoomOut, AiOutlineFullscreen, AiOutlineFullscreenExit } from \"react-icons/ai\";\r\nimport { Icon } from '@chakra-ui/icons';\r\nimport { FullScreen, useFullScreenHandle } from \"react-full-screen\";\r\nimport { useLocation } from 'react-router-dom';\r\nimport { InView } from 'react-intersection-observer';\r\nimport { baseUrl } from \"../BaseUrl\";\r\nimport axios from \"axios\";\r\n\r\nfunction PreviewPDF() {\r\n    const location = useLocation();\r\n    const [numPages, setNumPages] = useState();\r\n    const [pageScale, setPageScale] = useState(1.5);\r\n    const [currentPage, setCurrentPage] = useState(1);\r\n    const [numPagesLoaded, setNumPagesLoaded] = useState(0);\r\n    const [pdfData, setPDFData] = useState(null);\r\n    const pagesRef = useRef([]);\r\n    const handle = useFullScreenHandle();\r\n\r\n    const token = JSON.parse(\r\n        localStorage.getItem(\"DefencePostUserDetails\")\r\n    )?.token;\r\n\r\n    const getPDFData = async () => {\r\n        try {\r\n            let myCourseData = await axios.get(`${baseUrl}/file-upload/geturl/${location.state.name}`, {\r\n                headers: {\r\n                    token: token,\r\n                    \"Content-Type\": \"application/json\",\r\n                },\r\n            });\r\n            console.log(\"pdf data ==> \", myCourseData);\r\n            setPDFData(myCourseData?.data);\r\n        } catch (err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getPDFData();\r\n    }, [])\r\n\r\n    pdfjs.GlobalWorkerOptions.workerSrc = `//unpkg.com/pdfjs-dist@${pdfjs.version}/build/pdf.worker.min.js`;\r\n\r\n    function onDocumentLoadSuccess(pdfInfo) {\r\n        setNumPages(pdfInfo.numPages);\r\n    }\r\n\r\n    function onPageChange(pageNumber) {\r\n        setCurrentPage(pageNumber);\r\n        if (pageNumber !== \"\" && pageNumber > 0 && parseInt(pageNumber) <= numPages) {\r\n            pagesRef.current[parseInt(pageNumber)].scrollIntoView();\r\n        }\r\n    }\r\n\r\n    function onPageScaleChange(isZoomIn = true) {\r\n        if (isZoomIn) {\r\n            setPageScale(pageScale + 0.1);\r\n        } else {\r\n            setPageScale(pageScale - 0.1);\r\n        }\r\n    }\r\n\r\n    function onFullScreenModChange() {\r\n        if (handle.active) {\r\n            handle.exit();\r\n        } else {\r\n            handle.enter();\r\n        }\r\n    }\r\n\r\n    function onPageViewChange(inView, pageNum) {\r\n        if (inView && numPagesLoaded >= 1) {\r\n            setCurrentPage(pageNum);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <FullScreen handle={handle}>\r\n                <div className=\"pdfViewer-toolBar\">\r\n                    {/* update {name} with {location.state.name} */}\r\n                    <Text as='b' fontSize='2xl' style={{ position: \"absolute\", left: 20, align: \"center\", fontFamily: \"Barlow\" }}>{name}</Text>\r\n                    <Stack direction='row' spacing={4} align='center' >\r\n                        <Button backgroundColor={\"#29a4de\"} variant='solid' onClick={() => onPageScaleChange()}>\r\n                            <Icon as={AiOutlineZoomIn} color={\"white\"} />\r\n                        </Button>\r\n                        <Button backgroundColor={\"#29a4de\"} variant='solid' onClick={() => onPageScaleChange(false)}>\r\n                            <Icon as={AiOutlineZoomOut} color={\"white\"} />\r\n                        </Button>\r\n                        <Divider orientation='vertical' />\r\n                        <NumberInput\r\n                            defaultValue={1}\r\n                            min={1}\r\n                            max={numPages}\r\n                            value={currentPage}\r\n                            style={{ textAlign: \"center\", width: \"80px\" }}\r\n                            onChange={onPageChange}\r\n                        >\r\n                            <NumberInputField />\r\n                            <NumberInputStepper>\r\n                                <NumberIncrementStepper />\r\n                                <NumberDecrementStepper />\r\n                            </NumberInputStepper>\r\n                        </NumberInput>\r\n                        <h6>/ {numPages}</h6>\r\n                        <Divider orientation='vertical' />\r\n                        <Button onClick={onFullScreenModChange} backgroundColor={\"#29a4de\"} variant='solid'>\r\n                            <Icon as={handle.active ? AiOutlineFullscreenExit : AiOutlineFullscreen} color={\"white\"} />\r\n                        </Button>\r\n                    </Stack>\r\n                </div>\r\n\r\n                {pdfData ? (\r\n                    <div style={{ marginTop: \"50px\" }}>\r\n                        <Document\r\n                            file={`https://defencepost.s3.amazonaws.com/${pdfData?.fileName}?AWSAccessKeyId=${pdfData?.accessKeyId}&Expires=${pdfData?.expires}&Signature=${pdfData?.signature}`}\r\n                            onLoadSuccess={onDocumentLoadSuccess}\r\n                            loading={<Spinner size='md' />}\r\n                        >\r\n                            {[...Array(numPages)].map((x, i) =>\r\n                                <div\r\n                                    ref={el => { if (el) { pagesRef.current[i + 1] = el } }}\r\n                                    key={i}\r\n                                >\r\n                                    <InView\r\n                                        as=\"div\"\r\n                                        threshold={0.25}\r\n                                        onChange={(inView, entry) => { onPageViewChange(inView, i + 1) }}\r\n                                    >\r\n                                        <Page\r\n                                            pageNumber={i + 1}\r\n                                            renderAnnotationLayer={false}\r\n                                            renderTextLayer={false}\r\n                                            scale={pageScale}\r\n                                            loading={<Spinner size='md' />}\r\n                                            onRenderSuccess={() => setNumPagesLoaded(numPagesLoaded + 1)}\r\n                                        />\r\n                                    </InView>\r\n                                </div>\r\n                            )}\r\n                        </Document >\r\n                    </div>\r\n                ) : (<Spinner size='md' />)}\r\n            </FullScreen>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PreviewPDF;\r\n"],"names":["baseUrl","_JSON$parse","location","useLocation","numPages","setNumPages","useState","pageScale","setPageScale","currentPage","setCurrentPage","numPagesLoaded","setNumPagesLoaded","pdfData","setPDFData","pagesRef","useRef","handle","useFullScreenHandle","token","JSON","parse","localStorage","getItem","onPageScaleChange","arguments","length","undefined","useEffect","async","myCourseData","axios","get","concat","state","name","headers","console","log","data","err","getPDFData","pdfjs","GlobalWorkerOptions","workerSrc","version","_jsx","_Fragment","children","_jsxs","FullScreen","className","Text","as","fontSize","style","position","left","align","fontFamily","Stack","direction","spacing","Button","backgroundColor","variant","onClick","Icon","AiOutlineZoomIn","color","AiOutlineZoomOut","Divider","orientation","NumberInput","defaultValue","min","max","value","textAlign","width","onChange","pageNumber","parseInt","current","scrollIntoView","NumberInputField","NumberInputStepper","NumberIncrementStepper","NumberDecrementStepper","active","exit","enter","AiOutlineFullscreenExit","AiOutlineFullscreen","marginTop","Document","file","fileName","accessKeyId","expires","signature","onLoadSuccess","pdfInfo","loading","Spinner","size","Array","map","x","i","ref","el","InView","threshold","inView","entry","pageNum","onPageViewChange","Page","renderAnnotationLayer","renderTextLayer","scale","onRenderSuccess"],"sourceRoot":""}